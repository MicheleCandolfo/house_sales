house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade","yr_built", "sqm_living", "basement","renovated", "zipcode")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
model=randomForest(price~.,train, ntree = 100)
#house_prices3$floors <- as.factor(house_prices3$floors)
house_prices3$waterfront <- as.factor(house_prices3$waterfront)
house_prices3$grade <- as.factor(house_prices3$grade)
house_prices3$condition <- as.factor(house_prices3$condition)
house_prices3$zipcode <- (house_prices3$zipcode)
#Hinzufügen von zwei Spalten (boolean) (basement und renovated)
house_prices3$basement <- as.factor(ifelse(house_prices3$sqft_basement>0,1,0))
house_prices3$renovated <- as.factor(ifelse(house_prices3$yr_renovated>0,1,0))
house_prices3
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("corrplot")
install.packages("leaflet")
install.packages("caTools")
library("leaflet")
library("corrplot")
library("ggplot2")
library("dplyr")
library("caTools")
house_prices <- read.csv("kc_house_data.csv")
View(house_prices)
str(house_prices)
dim(house_prices)
# Genaueres Betrachten des Datensatzes
# Übersicht über den Datensatz und die jeweiligen einzigartigen Werte pro Variable
sapply(house_prices, function(x) length(unique(x)))
# Überprüfen auf Vollständigkeit des Datensatzes
table(complete.cases(house_prices))
dup <- filter(count(house_prices, id), n!=1)
count(dup, n)
View(dup)
# Sample
sample_check1 <- house_prices[house_prices$id == 526059224,]
View(sample_check1)
#-> Value of the features are the same except for the price which had a increase
sample_check2 <- house_prices[house_prices$id == 795000620,]
View(sample_check2)
#-> Value of the features are the same except for the price which had a increase
sample_check3 <- house_prices[house_prices$id == 7504021310,]
View(sample_check3)
# We checked all the sample duplicates and got the result that the value of the features are the same except for
# the price which had a increase.
#Price
#Umrechnung in $
#bedrooms und bathrooms
count(house_prices, bedrooms)
count(house_prices, bathrooms)
#Plausi-check bzgl. bedrooms und bathrooms
df2 <- select(house_prices, id, sqft_living, bedrooms)
df3 <- filter(df2, bedrooms == 33)
View(df3)
a <- df3[1, 2]
b <- df3[1, 3]
c <- a / b
qm <- 0.092903
c * qm
# -->33 is not a plausible amount of bedrooms because the bedroom itself has only around 5 square meters, we will change it to 3
#Create a copy of house_prices, change bedroom value from 33 to 3,# Eliminate all the data which has bedrooms or bathrooms = 0
house_prices2 <- house_prices
house_prices2[house_prices2$id==2402100895, "bedrooms"] <- 3
house_prices3<-house_prices2[!(house_prices2$bedrooms==0 | house_prices2$bathrooms==0),]
#house_prices3$floors <- as.factor(house_prices3$floors)
house_prices3$waterfront <- as.factor(house_prices3$waterfront)
house_prices3$grade <- as.factor(house_prices3$grade)
house_prices3$condition <- as.factor(house_prices3$condition)
#house_prices3$zipcode <- as.factor(house_prices3$zipcode)
#Hinzufügen von zwei Spalten (boolean) (basement und renovated)
house_prices3$basement <- as.factor(ifelse(house_prices3$sqft_basement>0,1,0))
house_prices3$renovated <- as.factor(ifelse(house_prices3$yr_renovated>0,1,0))
house_prices3
# Korrelation
data_pearson_correlation <- subset(house_prices3, select=c(price,bedrooms, bathrooms,sqft_living,sqft_lot, yr_built, yr_renovated,sqft_living15,sqft_lot15))
pearson_correlation <- cor(data_pearson_correlation)
View(pearson_correlation)
corrplot(pearson_correlation)
#Überprüfen, ob Korrelation signifikant ist
cor.test(data_pearson_correlation$price, data_pearson_correlation$bedrooms)
cor.test(data_pearson_correlation$price, data_pearson_correlation$bathrooms)
cor.test(data_pearson_correlation$price, data_pearson_correlation$sqft_living)
cor.test(data_pearson_correlation$price, data_pearson_correlation$sqft_lot)
cor.test(data_pearson_correlation$price, data_pearson_correlation$yr_built)
cor.test(data_pearson_correlation$price, data_pearson_correlation$yr_renovated)
cor.test(data_pearson_correlation$price, data_pearson_correlation$sqft_living15)
cor.test(data_pearson_correlation$price, data_pearson_correlation$sqft_lot15)
ggplot(house_prices3,aes(x=price))+
geom_histogram(binwidth = 500)+
scale_x_continuous(labels = scales::comma)+
scale_x_continuous(labels = scales::dollar)+
xlab('Price')+
ylab('Count')+
ggtitle('Price Distribution')
# more number of houses cost in the range of 0 to 1.6 M
ggplot(house_prices3,aes(price))+
geom_boxplot()+
scale_x_continuous(labels = scales::comma)+
scale_x_continuous(labels = scales::dollar)+
ggtitle('Price Distribution')
# entfernen der Datensätze die mehr als 6 Millionen Dollar kosten
dim(house_prices3)
house_prices4 = subset(house_prices3,!(house_prices3$price > 6000000))
dim(house_prices4)
ggplot(house_prices4,aes(price))+
geom_boxplot()+
scale_x_continuous(labels = scales::comma)+
scale_x_continuous(labels = scales::dollar)+
ggtitle('Price Distribution')
ggplot(house_prices4,aes(sqft_living))+
geom_boxplot()+
ggtitle('Distribution of Square Feet Living')
#Price vs. Sqft_living
ggplot(house_prices4,aes(x=sqft_living,y=price))+
geom_jitter(color='blue')+
xlab('Square Feet Living')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle('Price vs Square Feet Living')
#Ausreisser entfernen
dim(house_prices4)
house_prices4 = subset(house_prices4,!(house_prices4$sqft_living > 10000))
dim(house_prices4)
ggplot(house_prices4,aes(sqft_lot))+
geom_boxplot()+
ggtitle('Distribution of Square Feet Lot')
#Price vs. Sqft_living
ggplot(house_prices4,aes(x=sqft_lot,y=price))+
geom_jitter(color='blue')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
xlab('Square Feet Lot')+
ylab('Price')+
ggtitle('Price vs Square Feet Lot')
unique(house_prices4$bedrooms)
table(house_prices4$bedrooms)
ggplot(house_prices4,aes(bedrooms))+
geom_bar(fill="green")+
ggtitle('Distribution of bedrooms')
#Price vs. bedooms
ggplot(house_prices4, aes(x=bedrooms,y=price))+
geom_boxplot()+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs bedrooms")
ggplot(house_prices4, aes(x=sqft_living, y=price, color=bedrooms))+
geom_point()+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle(" Price vs sqft living on the bases of bedrooms")
unique(house_prices4$bathrooms)
table(house_prices4$bathrooms)
ggplot(house_prices4,aes(bathrooms))+
geom_bar(fill="green")+
ggtitle('Distribution of bathrooms')
#Price vs. Bathrooms
ggplot(house_prices4, aes(x=bathrooms,y=price))+
geom_boxplot()+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs Bathrooms")
ggplot(house_prices4, aes(x=sqft_living, y=price, color=bathrooms))+
geom_point()+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle(" Price vs sqft living on the bases of bathrooms")
ggplot(house_prices4, aes(yr_built))+
geom_histogram(binwidth = 1)+
xlab('YEAR BUILT')+
ylab('Count')+
ggtitle("COUNT OF HOUSE BUILT EACH YEAR")
ggplot(house_prices4,aes(x = yr_built,y = price))+
geom_bar(stat='identity',colour="aquamarine4")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs year built")
# Price of houses is directly proportional to te year it is built
ggplot( house_prices4,aes(x = yr_renovated,y = price))+
geom_bar(stat='identity',colour="aquamarine4")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs year renovated")
unique(house_prices4$floors)
table(house_prices4$floors)
ggplot(house_prices4,aes(floors, fill=floors))+
geom_bar()+
xlab('floors')+
ggtitle("Distribution of floors ")
# Price vs. Floors
ggplot(house_prices4,aes(x= floors,y= price))+
geom_boxplot()+
xlab('Floors')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs Floors")
table(house_prices4$waterfront)
ggplot(house_prices4, aes(x = factor(waterfront), y = price,fill=waterfront)) +
geom_boxplot()+
labs(x = "waterfront", y = "Price")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("price vs waterfront")
#Houses that have view of waterfront tend to be much
#expensive than house not having a view.
table(house_prices4$view)
ggplot(house_prices4,aes(view))+
geom_bar()+
xlab('View')+
ggtitle("Distribution of View ")
ggplot(house_prices4,aes(x=view,y= price ,fill=view))+
geom_boxplot(color= 'black')+
labs(x = "View", y = "price")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs View")
# as the number of view points increases price of the increases.
table(house_prices4$grade)
ggplot(house_prices4,aes(grade))+
geom_bar(color = 'green')+
xlab('grade')+
ggtitle("Distribution of Grade ")
# Price vs. Grade
ggplot(house_prices4,aes(x= grade,y= price))+
geom_boxplot()+
xlab('Grade')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs Grade")
table(house_prices4$condition)
ggplot(house_prices4,aes(condition))+
geom_bar(color = 'green')+
xlab('condition')+
ggtitle("Distribution of Condition ")
# Price vs. Condition
ggplot(house_prices4,aes(x= condition,y= price))+
geom_boxplot()+
xlab('condition')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs Condition")
table(house_prices4$zipcode)
ggplot(house_prices4,aes(zipcode))+
geom_bar()+
xlab('zipcode')+
ggtitle("Distribution of zipcde ")
# Price vs. Grade
ggplot(house_prices4,aes(x= zipcode,y= price))+
geom_boxplot()+
xlab('zipcode')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs zipcode")
table(house_prices4$basement)
ggplot(house_prices4, aes(x = basement, y = price,fill=basement)) +
geom_boxplot()+
labs(x = "basement", y = "Price")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("price vs basement")
table(house_prices4$renovated)
ggplot(house_prices4, aes(x = renovated, y = price,fill=renovated)) +
geom_boxplot()+
labs(x = "renovated", y = "Price")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("price vs renovated")
coordinates_data <- dplyr::select(house_prices4, price, lat, long)
head(coordinates_data)
pal = colorNumeric("YlOrRd", domain = coordinates_data$price)
int_map <- coordinates_data %>%
leaflet()%>%
addProviderTiles(providers$OpenStreetMap.Mapnik)%>%
addCircleMarkers(col = ~pal(price), opacity = 1.1, radius = 0.3) %>%
addLegend(pal = pal, values = ~price)
int_map
#sqft --> sqm
house_prices4$sqm_living <- round(house_prices4$sqft_living *qm)
house_prices4$sqm_lot <- round(house_prices4$sqft_lot *qm)
house_prices4$sqm_lot15 <- round(house_prices4$sqft_lot15 *qm)
house_prices4$sqm_living15 <- round(house_prices4$sqft_living15 *qm)
house_prices4$sqm_above <- round(house_prices4$sqft_above *qm)
house_prices4$sqm_basement <- round(house_prices4$sqft_basement *qm)
#drop sqft columns
house_prices4[,c("sqft_living","sqft_lot","sqft_above","sqft_basement","sqft_lot15","sqft_living15")] <- list(NULL)
head(house_prices4)
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade","yr_built", "sqm_living", "basement","renovated", "zipcode")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
#house_for_lm <- train %>% select(-long)
#model2=lm(log(price) ~., data = house_for_lm)
#summary(model2)
install.packages("randomForest")
library(randomForest)
install.packages('caret')
library(caret)
model=randomForest(price~.,train, ntree = 100)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
install.packages("leaflet")
model=randomForest(price~.,train)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade","yr_built", "sqm_living", "basement","renovated", "zipcode","sqm_living15", "sqm_lot15")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
model=randomForest(price~.,train)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","yr_built", "sqm_living", "basement","renovated", "zipcode","sqm_living15", "sqm_lot15")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
model=randomForest(price~.,train)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
houses_prices4$yearb<-factor(houses1$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
houses_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade","yr_built", "sqm_living", "basement","renovated", "zipcode", "yearb")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
model=randomForest(price~.,train)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade", "sqm_living", "basement","renovated", "zipcode", "yearb")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
model=randomForest(price~.,train)
head(house_prices5)
head(house_prices5)
filter(!is.na(yearb))
head(house_prices5)
filter(!is.na(house_prices5$yearb))
head(house_prices5)
model=randomForest(price~.,train)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4<-house_prices4 %>% filter(!is.na(yearb))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade", "sqm_living", "basement","renovated", "zipcode", "yearb")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
head(house_prices5)
model=randomForest(price~.,train)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4<-house_prices4 %>% filter(!is.na(yearb))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade", "sqm_living", "basement","renovated", "zipcode", "yearb","sqm_lot15","sqm_living15")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
model=randomForest(price~.,train, ntree=100)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
model=randomForest(price~.,train, ntree=600)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
importance(model)
varImpPlot(model,type=2)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4<-house_prices4 %>% filter(!is.na(yearb))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade", "sqm_living", "basement","renovated", "zipcode", "yearb","sqm_lot15","sqm_living15", "floors")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
model=randomForest(price~.,train)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
shiny::runApp('house_sales')
knitr::opts_chunk$set(echo = TRUE)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("corrplot")
install.packages("leaflet")
install.packages("caTools")
library("leaflet")
library("corrplot")
library("ggplot2")
library("dplyr")
library("caTools")
house_prices <- read.csv("kc_house_data.csv")
View(house_prices)
str(house_prices)
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
