source("~/Documents/Master Wirtschaftsinformatik HS Aalen/1. Semester/Business Analytics - AE/Functions.R")
source("~/Documents/Master Wirtschaftsinformatik HS Aalen/1. Semester/Business Analytics - AE/Functions.R")
myfunction2(4,2)
myfunction2(4,2)
myfunction2(3,5)
myfunction2(3,4)
file.choose()
install.packages("ggplot2")
library("ggplot2")
qplot(mtcars$hp, mtcars$wt)
mydf <- mtcars
mydf$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mydf$am <- factor(mtcars $am,levels=c(0,1),
labels=c("Automatic","Manual"))
mydf$cyl <- factor(mtcars $cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
plot(mtcars$mpg,mtcars$hp)
qplot(mtcars$mpg,mtcars$cyl)
View(mydf)
ggplot(mydf)+geom_bar(aes(cyl))
corona <- read.csv(file = 'day_wise.csv')
corona <- read.csv(file = 'data_set/day_wise.csv')
file.choose()
corona <- read.csv(file = '/Users/michelecandolfo/Documents/data_set/day_wise.csv')
corona.view()
corona
corona.View()
View(corona)
shiny::runApp('Documents/Shiny App')
runApp('Documents/Shiny App/app-2.R')
runApp('Documents/Shiny App/app-3.R')
runApp('Documents/Shiny App/app-3.R')
runApp('Documents/Shiny App/app-3.R')
runApp('Documents/Shiny App/app-3.R')
View(corona)
View(corona_country)
corona_country <- read.csv(file = '/Users/michelecandolfo/Documents/data_set/country_wise_latest.csv')
View(corona_country)
worldmeter <- read.csv(file = '/Users/michelecandolfo/Documents/data_set/worldometer_data.csv')
View(woldmeter)
View(worldmeter)
runApp('Documents/Shiny App')
file.choose()
house_prices <- read.csv(file = '/Users/michelecandolfo/Documents/Shiny App/Abgabe/HousePriceDataSet/kc_house_data.csv')
View(house_prices)
summary(house_prices)
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
count(house_prices, bedrooms)
shiny::runApp('Documents/Shiny App/Abgabe')
runApp('Documents/Shiny App/Abgabe')
library(corrplot)
---
title: "HousePriceKingCounty"
output: html_document
---
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("corrplot")
library(corrplot)
library("ggplot2")
library("dplyr")
house_prices <- read.csv("kc_house_data.csv")
View(house_prices)
str(house_prices)
dim(house_prices)
# Genaueres Betrachten des Datensatzes
# Übersicht über den Datensatz und die jeweiligen einzigartigen Werte pro Variable
sapply(house_prices, function(x) length(unique(x)))
# Überprüfen auf Vollständigkeit des Datensatzes
table(complete.cases(house_prices))
summary(house_prices)
count(house_prices, bedrooms)
count(house_prices, bathrooms)
df2 <- select(house_prices, id, sqft_living, bedrooms)
df3 <- filter(df2, bedrooms == 33)
View(df3)
a <- df3[1, 2]
b <- df3[1, 3]
c <- a / b
c * 0.092903
house_prices2 <- house_prices
house_prices2[house_prices2$id==2402100895, "bedrooms"] <- 3
house_prices3<-house_prices2[!(house_prices2$bedrooms==0 | house_prices2$bathrooms==0),]
dup <- filter(count(house_prices3, id), n!=1)
count(dup, n)
View(dup)
# Sample
sample_check1 <- house_prices3[house_prices3$id == 526059224,]
View(sample_check1)
#-> Value of the features are the same except for the price which had a increase
sample_check2 <- house_prices3[house_prices3$id == 795000620,]
View(sample_check2)
#-> Value of the features are the same except for the price which had a increase
sample_check3 <- house_prices3[house_prices3$id == 7504021310,]
View(sample_check3)
# We checked all the sample duplicates and got the result that the value of the features are the same except for
# the price which had a increase.
house_prices4 <- subset(house_prices3, select=c(price,bedrooms, bathrooms,sqft_living,sqft_lot,floors,waterfront,view, condition,grade,sqft_above, sqft_basement, yr_built, yr_renovated, zipcode,lat, long,sqft_living15,sqft_lot15))
corrHouse_prices <- cor(house_prices4)
View(corrHouse_prices)
corrplot(corrHouse_prices)
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("corrplot")
library(corrplot)
library("ggplot2")
library("dplyr")
house_prices <- read.csv("kc_house_data.csv")
View(house_prices)
str(house_prices)
dim(house_prices)
# Genaueres Betrachten des Datensatzes
# Übersicht über den Datensatz und die jeweiligen einzigartigen Werte pro Variable
sapply(house_prices, function(x) length(unique(x)))
# Überprüfen auf Vollständigkeit des Datensatzes
table(complete.cases(house_prices))
summary(house_prices)
count(house_prices, bedrooms)
count(house_prices, bathrooms)
df2 <- select(house_prices, id, sqft_living, bedrooms)
df3 <- filter(df2, bedrooms == 33)
View(df3)
a <- df3[1, 2]
b <- df3[1, 3]
c <- a / b
c * 0.092903
house_prices2 <- house_prices
house_prices2[house_prices2$id==2402100895, "bedrooms"] <- 3
house_prices3<-house_prices2[!(house_prices2$bedrooms==0 | house_prices2$bathrooms==0),]
dup <- filter(count(house_prices3, id), n!=1)
count(dup, n)
View(dup)
# Sample
sample_check1 <- house_prices3[house_prices3$id == 526059224,]
View(sample_check1)
#-> Value of the features are the same except for the price which had a increase
sample_check2 <- house_prices3[house_prices3$id == 795000620,]
View(sample_check2)
#-> Value of the features are the same except for the price which had a increase
sample_check3 <- house_prices3[house_prices3$id == 7504021310,]
View(sample_check3)
# We checked all the sample duplicates and got the result that the value of the features are the same except for
# the price which had a increase.
house_prices4 <- subset(house_prices3, select=c(price,bedrooms, bathrooms,sqft_living,sqft_lot,floors,waterfront,view, condition,grade,sqft_above, sqft_basement, yr_built, yr_renovated, zipcode,lat, long,sqft_living15,sqft_lot15))
corrHouse_prices <- cor(house_prices4)
View(corrHouse_prices)
corrplot(corrHouse_prices)
cor.test(house_prices4$price, house_prices4$bedrooms)
cor.test(house_prices4$price, house_prices4$bathrooms)
cor.test(house_prices4$price, house_prices4$sqft_living)
cor.test(house_prices4$price, house_prices4$sqft_lot)
cor.test(house_prices4$price, house_prices4$floors)
cor.test(house_prices4$price, house_prices4$view)
cor.test(house_prices4$price, house_prices4$condition)
cor.test(house_prices4$price, house_prices4$grade)
cor.test(house_prices4$price, house_prices4$sqft_above)
cor.test(house_prices4$price, house_prices4$sqft_basement)
cor.test(house_prices4$price, house_prices4$yr_built)
cor.test(house_prices4$price, house_prices4$yr_renovated)
cor.test(house_prices4$price, house_prices4$zipcode)
cor.test(house_prices4$price, house_prices4$lat)
cor.test(house_prices4$price, house_prices4$long)
cor.test(house_prices4$price, house_prices4$sqft_living15)
cor.test(house_prices4$price, house_prices4$sqft_lot15)
ggplot(house_prices4,aes(x=price))+
geom_freqpoly(binwidth = 500)+
xlab('Price')+
ylab('Count')+
ggtitle('Price Distribution')
# more number of houses cost in the range of 0 to 1.6 M
# converting Price column
convertPrice = log10(house_prices4$price)
ggplot(house_prices4,aes(convertPrice))+
geom_histogram(fill='green',binwidth = 0.10)+
xlab('Price')+
ylab('Count')+
ggtitle('Price Distribution')
ggplot(house_prices4,aes(price))+
geom_boxplot()
ggtitle('Price Distribution')
ggplot(house_prices4,aes(convertPrice))+
geom_boxplot()
ggtitle('Price Distribution')
ggplot(house_prices4,aes(sqft_living))+
geom_boxplot()+
ggtitle('Distribution of Square Feet Living')
#Price vs. Sqft_living
ggplot(house_prices4,aes(x=sqft_living,y=price))+
geom_jitter(color='blue')+
xlab('Square Feet Living')+
ylab('Price')+
ggtitle('Price vs Square Feet Living')
ggplot(house_prices4,aes(sqft_above))+
geom_freqpoly(binwidth=50,color = 'red')+
xlab('Square Feet Above')+
ggtitle("Distribution of square feet above")
#Price vs. Sqft_above
ggplot(house_prices4,aes(x=sqft_above,y=price))+
geom_jitter(color = 'blue')+
xlab('Square Feet Above')+
ylab('Price')+
ggtitle('Price vs Square feet above')
ggplot(house_prices4,aes(x=sqft_above,y=convertPrice))+
geom_jitter(color='blue')+
xlab('Square Feet Above')+
ylab('ConvertPrice')+
ggtitle('ConvertPrice vs Square feet above')
unique(house_prices4$bathrooms)
table(house_prices4$bathrooms)
house_prices4$bathrooms <- as.factor(house_prices4$bathrooms)
ggplot(house_prices4,aes(bathrooms))+
geom_bar(fill="green")+
ggtitle('Distribution of bathrooms')
#Price vs. Bathrooms
ggplot(house_prices4, aes(x=bathrooms,y=price))+
geom_boxplot()+
ggtitle("Price vs Bathrooms")
ggplot(house_prices4, aes(x=sqft_living, y=price, color=bathrooms))+
geom_point()+
ggtitle(" Price vs sqft living on the bases of bathrooms")
unique(house_prices4$bedrooms)
table(house_prices4$bedrooms)
house_prices4$bedrooms <- as.factor(house_prices4$bedrooms)
ggplot(house_prices4,aes(bedrooms))+
geom_bar(fill="green")+
ggtitle('Distribution of bedrooms')
#Price vs. bedooms
ggplot(house_prices4, aes(x=bedrooms,y=price))+
geom_boxplot()+
ggtitle("Price vs bedrooms")
ggplot(house_prices4, aes(x=sqft_living, y=price, color=bedrooms))+
geom_point()+
ggtitle(" Price vs sqft living on the bases of bedrooms")
house_prices4$condition <- as.factor(house_prices4$condition)
unique(house_prices4$condition)
table(house_prices4$condition)
ggplot(house_prices4,aes(condition))+
geom_bar(color = 'green')+
xlab('condition')+
ggtitle("Distribution of Condition ")
# Price vs. Condition
ggplot(house_prices4,aes(x= condition,y= price))+
geom_boxplot()+
xlab('condition')+
ylab('Price')+
ggtitle("Price vs Condition")
ggplot(house_prices4,aes(x= condition,y= convertPrice))+
geom_boxplot(color = 'aquamarine4')+
xlab('Condition')+
ylab('ConvertPrice')+
ggtitle("ConvertPrice vs  Condition")
log_size=log10(house_prices4$sqft_living)
ggplot(house_prices4,aes(x=log_size,y=convertPrice,color=condition))+
geom_point(size=0.5)+
facet_wrap(~condition)+
ggtitle("Log_price vs Log_size for each Condition")
house_prices4$grade <- as.factor(house_prices4$grade)
unique(house_prices4$grade)
table(house_prices4$grade)
ggplot(house_prices4,aes(grade))+
geom_bar(color = 'green')+
xlab('grade')+
ggtitle("Distribution of Grade ")
# Price vs. Condition
ggplot(house_prices4,aes(x= grade,y= price))+
geom_boxplot()+
xlab('Grade')+
ylab('Price')+
ggtitle("Price vs Grade")
ggplot(house_prices4,aes(x= grade,y= convertPrice))+
geom_boxplot(color = 'blue')+
xlab('Grade')+
ylab('ConvertPrice')+
ggtitle("ConvertPrice vs  Grade")
shiny::runApp()
library(leaflet)
library(leaflet.providers)
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("install.load")
install.packages("install.load")
install.packages(install.load)
library(install.load)
runApp()
shiny::runApp()
runApp()
runApp('test')
?img
runApp('test')
runApp()
runApp('test')
library(shinydashboardPlus)
runApp('test')
library(shinydashboardPlus)
runApp('~/Documents/Git/house_sales')
runApp()
runApp()
