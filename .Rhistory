1+2
2-7
13/2
2*pi
3*2
2^2
2**3
2*(2+1)
2*2+1
7%%2
sqrt(4)
sqrt(9)
abs(-3)
sqrt(abs(-4))
x<-2
3->y
z=4
5=t
t=5
2w<-1
r<-2/3*7+x
r<-2/3*7+x
x<-2
3->y
t=5
x<-2
3->y
z=4
r<-2/3*7+x
x->3
x<-3
3->x
2->x
rm(x)
x=2
x*2
2*x
x*y
z
Y*x
d<-x*y
x<--z*5
d
d<-x*y
sqrt(d)
sqrt(d)
d=60
x=20
sqrt(d)
v1<-c(1,2)
v1
v2<-c(1,2,3)
v2
v3<-c(1,2,3,4)
v3
v3
v6<-seq(0,5,1)
v7<-seq(0,8,2)
v7
seq(3,6,1)
seq(0,30,5)
v1+1
v1+v1
v1+v2
2*v1
v1*v1
v1*v2
v1*v3
v1[1]
v1[2]
v1[3]
v2[1]
v2[2]
v2[2]<-66
v2[2]
v2
x<-2
v2[x]
v2[v1]
v3[2:4]
2:4
x
str(x)
s<-"test"
s
str(s)
v4<-c("x","x")
str(v4)
v4<-c("x","y")
str(v4)
v5<-c(1,"x")
str(v5)
help("factor")
help(factor)
str()
patient<-factor(c("good","poor","healthy","poor","poor"))
patien<-factor(c("goo"))
patient<-factor(c("good","poor","healthy","poor","poor"))
patient<-factor(c("good","poor","healthy","poor","poor"), ordered = TRUE)
patient<-factor(c("good","poor","healthy","poor","poor"), ordered = TRUE,
levels = c("poor","good","healthy"))
patient
patient<-factor(c())
patient<-factor(c("good","poor","healthy","poor","poor"), ordered = TRUE,
levels = c("poor","good","healthy"))
patient<-factor(
c("good",
"poor",
"healthy",
"poor",
"poor"),
ordered = TRUE,
levels = c("poor",
"good",
"healthy")
)
str(patient)
summary(patien)
summary(patient)
length(patient)
length(v3)
rm(patien)
table(patient)
view(mtcars)
mydf<-mtcars
view(mtcars)
View(mtcars)
str(mydf)
names(mydf)
names(mydf)[1]
names(mydf)[1]<-"test"
row.names(mydf)
row.names(mydf)[1]
row.names(mydf)[1]<-"test"
test
"test"
mydf$test
mydf$cyl
mydf["cyl"]
str.(mydf)
str(mydf)
View(mydf)
myfunction3 <-function(k,l,m){
return(k+l+m)
}
myfunction(1,2,3)
myfunction(1,2,3)
myfunction <-function(k,l,m){
return(k+l+m)
}
myfunction(1,2,3)
source("C:/Users/pkurz/Desktop/Aalen University/BA - Anwendungsentwicklung/RStudio/firstScript.R")
source("C:/Users/pkurz/Desktop/Aalen University/BA - Anwendungsentwicklung/RStudio/firstScript.R")
print("hello World")
myfunction <-function(k,l,m){      #Name der Funktion
return(k+l+m)     #Operation der Funktion
}
myfunction(1,2,3) #myfunction(k=1,l=2,m=3)
print("hello World")
Hypotenuse<-function(a,b,c){
return(a+b=c)
Hypotenuse<-function(a,b){
return(a+b)
Hypotenuse<-function(a,b){
return(a^2+b^2)
hypotenuse<-function(a,b){
return(a^2+b^2)
}
hypotenuse<-function(a,b){
return(a^2+b^2)
}
hypotenuse(2,3)
hypotenuse<-function(a,b){
return(a^2+b^2)
}
hypotenuse(2,3)
hypotenuse <-function(a,b){
return(a^2+b^2)
}
hypotenuse(2,3)
hypotenuse <-function(a,b){
return((a*a)+(b*b))
}
hypotenuse(2,3)
hypo <-function(k1,k2){
h <- sqrt(k1^2+k2^2)
print(h)
}
hypo(3,4)
hypo(3,4)
hypo <-function(k1,k2){
h <- sqrt(k1^2+k2^2)
print(h)
}
hypo(3,4)
hypo <-function(k1,k2){
h <-sqrt(k1^2+k2^2)
return(h)
}
hypo(3,4)
hypo <-function(k1,k2){
h <-sqrt(k1^2+k2^2)
return(h)
}
hypo(3,4)
hypo(3,4)
myfunction <-function(k,l,m){
return(k+l+m)
}
myfunction(1,2,3)
## a²+b²=c² Hypotenuse berechnet mittels Kathete
hypo <-function(k1,k2){
h <-sqrt(k1^2+k2^2)
return(h)
}
hypo(3,4)
hypo<-function(k1,k2){
h <-sqrt(k1^2+k2^2)
return(h)
hypo<-function(k1,k2){
h <-sqrt(k1^2+k2^2)
return(h)
}
hypo
myfunction <-function(k,l,m){       #Name der Funktion
return(k+l+m)                     #Operation der Funktion
}
myfunction(1,2,3)                   #myfunction(k=1,l=2,m=3)
print("hello World")
source("C:/Users/pkurz/Desktop/Aalen University/BA - Anwendungsentwicklung/RStudio/firstScript.R")
# Funktionen erstellen, um diese zu verstehen
# Auskommentieren mit "#"
myfunction <-function(k,l,m){       #Name der Funktion
return(k+l+m)                     #Operation der Funktion
}
myfunction(1,2,3)                   #myfunction(k=1,l=2,m=3)
print("hello World")
write.csv(mtcars,C:\\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio)
write.csv(mtcars,C:\\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio)
write.csv(mtcars,C:\\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio)
write.csv(mtcars,C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio)
write.csv(mtcars,"C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio")
write.csv2(mtcars,"C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio\mtcars.csv")
write.csv2(mtcars,"C:/Users/pkurz/Desktop/Aalen University/BA - Anwendungsentwicklung/RStudio/mtcars.csv")
test1<-read.csv(path)
hypo<-function(k1,k2)
hypo(3,4)
hypo<-function(k1,k2){
h <-sqrt(k1^2+k2^2)
return(h)
}
hypo(3,4)
test5<-read.csv2(path2, stringsAsFactors = FALSE)
Path1<-"C:/Users/Ralf/Desktop/test.txt"
path2<-"C:/Users/Ralf/Desktop/test2.txt"
write.csv(mydf,path1)
write.csv2(mydf,path2)
write.csv(mtcars,path1)
write.csv2(mtcars,path2)
help(stringsAsFactors)
plot(mtcars$hp.mtcars$mpg)
plot(mtcars$hp,mtcars$mpg)
install.packages("ggplot2")
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
qplot(mtcars$hp,mtcars$mpg)
mydf<-mtcars
mydf$gear<-factor(mtcars$gear.levels=c(3,4,5),
labels=c("3gears","4gears","5gears")
mydf <- mtcars
mydf$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mydf$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mydf$am <- factor(mtcars $am,levels=c(0,1),
labels=c("Automatic","Manual"))
mydf$cyl <- factor(mtcars $cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
plot(mtcars$mpg,mtcars$hp)
qplot(mtcars$mpg,mtcars$cyl)
library(shiny); runApp('C:/Users/pkurz/Desktop/Aalen University/BA - Anwendungsentwicklung/RStudio/dataprofessor/appHistogram.R')
print(t2-t1)
# load data
t1 <- Sys.time()
# init
library(tidyverse)
library(lubridate)
list.files(path = 'C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio\kaggle\COVID-19 Tracking Germany')
# load data
t1 <- Sys.time()
df <- read.csv('C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio\kaggle\COVID-19 Tracking Germany/covid_de.csv')
df_demo <- read.csv('C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio\kaggle\COVID-19 Tracking Germany/demographics_de.csv')
t2 <- Sys.time()
print(t2-t1)
# init
library(tidyverse)
library(lubridate)
list.files(path = 'C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio\kaggle\COVID-19 Tracking Germany')
# load data
t1 <- Sys.time()
df <- read.csv('C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio\kaggle\COVID-19 Tracking Germany/covid_de.csv')
df_demo <- read.csv('C:\Users\pkurz\Desktop\Aalen University\BA - Anwendungsentwicklung\RStudio\kaggle\COVID-19 Tracking Germany/demographics_de.csv')
t2 <- Sys.time()
print(t2-t1)
install.packages("rmarkdown")
install.packages("highr")
install.packages("Rtools")
install.packages("rmarkdown")
install.packages("highr")
install.packages("stringi")
install.packages("knitr")
install.packages("yaml")
install.packages("evaluate")
install.packages("tinytex")
install.packages("xfun")
install.packages("stringr")
install.packages("rmarkdown")
install.packages("highr")
load("C:/Users/pkurz/Desktop/Aalen University/BA - Anwendungsentwicklung/HouseSalesKC-Main/house_sales/.RData")
shiny::runApp('C:/Users/pkurz/Desktop/Aalen University/BA - Anwendungsentwicklung/HouseSalesKC-Main/house_sales')
runApp('C:/Users/pkurz/Desktop/Aalen University/BA - Anwendungsentwicklung/HouseSalesKC-Main/house_sales')
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
<<<<<<< HEAD
install.packages("corrplot")
library(corrplot)
library("ggplot2")
library("dplyr")
house_prices <- read.csv("kc_house_data.csv")
View(house_prices)
str(house_prices)
dim(house_prices)
# Genaueres Betrachten des Datensatzes
# Übersicht über den Datensatz und die jeweiligen einzigartigen Werte pro Variable
sapply(house_prices, function(x) length(unique(x)))
# Überprüfen auf Vollständigkeit des Datensatzes
table(complete.cases(house_prices))
summary(house_prices)
count(house_prices, bedrooms)
count(house_prices, bathrooms)
df2 <- select(house_prices, id, sqft_living, bedrooms)
df3 <- filter(df2, bedrooms == 33)
View(df3)
a <- df3[1, 2]
b <- df3[1, 3]
c <- a / b
c * 0.092903
house_prices2 <- house_prices
house_prices2[house_prices2$id==2402100895, "bedrooms"] <- 3
house_prices3<-house_prices2[!(house_prices2$bedrooms==0 | house_prices2$bathrooms==0),]
dup <- filter(count(house_prices3, id), n!=1)
count(dup, n)
View(dup)
# Sample
sample_check1 <- house_prices3[house_prices3$id == 526059224,]
View(sample_check1)
#-> Value of the features are the same except for the price which had a increase
sample_check2 <- house_prices3[house_prices3$id == 795000620,]
View(sample_check2)
#-> Value of the features are the same except for the price which had a increase
sample_check3 <- house_prices3[house_prices3$id == 7504021310,]
View(sample_check3)
# We checked all the sample duplicates and got the result that the value of the features are the same except for
# the price which had a increase.
house_prices4 <- subset(house_prices3, select=c(price,bedrooms, bathrooms,sqft_living,sqft_lot,floors,waterfront,view, condition,grade,sqft_above, sqft_basement, yr_built, yr_renovated, zipcode,lat, long,sqft_living15,sqft_lot15))
corrHouse_prices <- cor(house_prices4)
View(corrHouse_prices)
corrplot(corrHouse_prices)
cor.test(house_prices4$price, house_prices4$bedrooms)
cor.test(house_prices4$price, house_prices4$bathrooms)
cor.test(house_prices4$price, house_prices4$sqft_living)
cor.test(house_prices4$price, house_prices4$sqft_lot)
cor.test(house_prices4$price, house_prices4$floors)
cor.test(house_prices4$price, house_prices4$view)
cor.test(house_prices4$price, house_prices4$condition)
cor.test(house_prices4$price, house_prices4$grade)
cor.test(house_prices4$price, house_prices4$sqft_above)
cor.test(house_prices4$price, house_prices4$sqft_basement)
cor.test(house_prices4$price, house_prices4$yr_built)
cor.test(house_prices4$price, house_prices4$yr_renovated)
cor.test(house_prices4$price, house_prices4$zipcode)
cor.test(house_prices4$price, house_prices4$lat)
cor.test(house_prices4$price, house_prices4$long)
cor.test(house_prices4$price, house_prices4$sqft_living15)
cor.test(house_prices4$price, house_prices4$sqft_lot15)
ggplot(house_prices4,aes(x=price))+
geom_freqpoly(binwidth = 500)+
xlab('Price')+
ylab('Count')+
ggtitle('Price Distribution')
# more number of houses cost in the range of 0 to 1.6 M
# converting Price column
convertPrice = log10(house_prices4$price)
ggplot(house_prices4,aes(convertPrice))+
geom_histogram(fill='green',binwidth = 0.10)+
xlab('Price')+
ylab('Count')+
ggtitle('Price Distribution')
ggplot(house_prices4,aes(price))+
geom_boxplot()
ggtitle('Price Distribution')
ggplot(house_prices4,aes(convertPrice))+
geom_boxplot()
ggtitle('Price Distribution')
ggplot(house_prices4,aes(sqft_living))+
geom_boxplot()+
ggtitle('Distribution of Square Feet Living')
#Price vs. Sqft_living
ggplot(house_prices4,aes(x=sqft_living,y=price))+
geom_jitter(color='blue')+
xlab('Square Feet Living')+
ylab('Price')+
ggtitle('Price vs Square Feet Living')
ggplot(house_prices4,aes(sqft_above))+
geom_freqpoly(binwidth=50,color = 'red')+
xlab('Square Feet Above')+
ggtitle("Distribution of square feet above")
#Price vs. Sqft_above
ggplot(house_prices4,aes(x=sqft_above,y=price))+
geom_jitter(color = 'blue')+
xlab('Square Feet Above')+
ylab('Price')+
ggtitle('Price vs Square feet above')
ggplot(house_prices4,aes(x=sqft_above,y=convertPrice))+
geom_jitter(color='blue')+
xlab('Square Feet Above')+
ylab('ConvertPrice')+
ggtitle('ConvertPrice vs Square feet above')
unique(house_prices4$bathrooms)
table(house_prices4$bathrooms)
house_prices4$bathrooms <- as.factor(house_prices4$bathrooms)
ggplot(house_prices4,aes(bathrooms))+
geom_bar(fill="green")+
ggtitle('Distribution of bathrooms')
#Price vs. Bathrooms
ggplot(house_prices4, aes(x=bathrooms,y=price))+
geom_boxplot()+
ggtitle("Price vs Bathrooms")
ggplot(house_prices4, aes(x=sqft_living, y=price, color=bathrooms))+
geom_point()+
ggtitle(" Price vs sqft living on the bases of bathrooms")
unique(house_prices4$bedrooms)
table(house_prices4$bedrooms)
house_prices4$bedrooms <- as.factor(house_prices4$bedrooms)
ggplot(house_prices4,aes(bedrooms))+
geom_bar(fill="green")+
ggtitle('Distribution of bedrooms')
#Price vs. bedooms
ggplot(house_prices4, aes(x=bedrooms,y=price))+
geom_boxplot()+
ggtitle("Price vs bedrooms")
ggplot(house_prices4, aes(x=sqft_living, y=price, color=bedrooms))+
geom_point()+
ggtitle(" Price vs sqft living on the bases of bedrooms")
house_prices4$condition <- as.factor(house_prices4$condition)
unique(house_prices4$condition)
table(house_prices4$condition)
ggplot(house_prices4,aes(condition))+
geom_bar(color = 'green')+
xlab('condition')+
ggtitle("Distribution of Condition ")
# Price vs. Condition
ggplot(house_prices4,aes(x= condition,y= price))+
geom_boxplot()+
xlab('condition')+
ylab('Price')+
ggtitle("Price vs Condition")
ggplot(house_prices4,aes(x= condition,y= convertPrice))+
geom_boxplot(color = 'aquamarine4')+
xlab('Condition')+
ylab('ConvertPrice')+
ggtitle("ConvertPrice vs  Condition")
log_size=log10(house_prices4$sqft_living)
ggplot(house_prices4,aes(x=log_size,y=convertPrice,color=condition))+
geom_point(size=0.5)+
facet_wrap(~condition)+
ggtitle("Log_price vs Log_size for each Condition")
house_prices4$grade <- as.factor(house_prices4$grade)
unique(house_prices4$grade)
table(house_prices4$grade)
ggplot(house_prices4,aes(grade))+
geom_bar(color = 'green')+
xlab('grade')+
ggtitle("Distribution of Grade ")
# Price vs. Condition
ggplot(house_prices4,aes(x= grade,y= price))+
geom_boxplot()+
xlab('Grade')+
ylab('Price')+
ggtitle("Price vs Grade")
ggplot(house_prices4,aes(x= grade,y= convertPrice))+
geom_boxplot(color = 'blue')+
xlab('Grade')+
ylab('ConvertPrice')+
ggtitle("ConvertPrice vs  Grade")
shiny::runApp()
library(leaflet)
library(leaflet.providers)
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("install.load")
install.packages("install.load")
install.packages(install.load)
library(install.load)
runApp()
shiny::runApp()
runApp()
runApp('test')
?img
runApp('test')
runApp()
runApp('test')
library(shinydashboardPlus)
runApp('test')
library(shinydashboardPlus)
runApp('~/Documents/Git/house_sales')
runApp()
runApp()
shiny::runApp()
=======
>>>>>>> 2c39351318abb52850bc5ca80aa90e021915bd07
