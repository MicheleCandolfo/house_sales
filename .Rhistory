scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle(" Price vs sqft living on the bases of bedrooms")
unique(house_prices4$bathrooms)
table(house_prices4$bathrooms)
ggplot(house_prices4,aes(bathrooms))+
geom_bar(fill="green")+
ggtitle('Distribution of bathrooms')
#Price vs. Bathrooms
ggplot(house_prices4, aes(x=bathrooms,y=price))+
geom_boxplot()+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs Bathrooms")
ggplot(house_prices4, aes(x=sqft_living, y=price, color=bathrooms))+
geom_point()+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle(" Price vs sqft living on the bases of bathrooms")
ggplot(house_prices4, aes(yr_built))+
geom_histogram(binwidth = 1)+
xlab('YEAR BUILT')+
ylab('Count')+
ggtitle("COUNT OF HOUSE BUILT EACH YEAR")
ggplot(house_prices4,aes(x = yr_built,y = price))+
geom_bar(stat='identity',colour="aquamarine4")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs year built")
# Price of houses is directly proportional to te year it is built
ggplot( house_prices4,aes(x = yr_renovated,y = price))+
geom_bar(stat='identity',colour="aquamarine4")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs year renovated")
unique(house_prices4$floors)
table(house_prices4$floors)
ggplot(house_prices4,aes(floors, fill=floors))+
geom_bar()+
xlab('floors')+
ggtitle("Distribution of floors ")
# Price vs. Floors
ggplot(house_prices4,aes(x= floors,y= price))+
geom_boxplot()+
xlab('Floors')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs Floors")
table(house_prices4$waterfront)
ggplot(house_prices4, aes(x = factor(waterfront), y = price,fill=waterfront)) +
geom_boxplot()+
labs(x = "waterfront", y = "Price")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("price vs waterfront")
#Houses that have view of waterfront tend to be much
#expensive than house not having a view.
table(house_prices4$view)
ggplot(house_prices4,aes(view))+
geom_bar()+
xlab('View')+
ggtitle("Distribution of View ")
ggplot(house_prices4,aes(x=view,y= price ,fill=view))+
geom_boxplot(color= 'black')+
labs(x = "View", y = "price")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs View")
# as the number of view points increases price of the increases.
table(house_prices4$grade)
ggplot(house_prices4,aes(grade))+
geom_bar(color = 'green')+
xlab('grade')+
ggtitle("Distribution of Grade ")
# Price vs. Grade
ggplot(house_prices4,aes(x= grade,y= price))+
geom_boxplot()+
xlab('Grade')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs Grade")
table(house_prices4$condition)
ggplot(house_prices4,aes(condition))+
geom_bar(color = 'green')+
xlab('condition')+
ggtitle("Distribution of Condition ")
# Price vs. Condition
ggplot(house_prices4,aes(x= condition,y= price))+
geom_boxplot()+
xlab('condition')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs Condition")
table(house_prices4$zipcode)
ggplot(house_prices4,aes(zipcode))+
geom_bar()+
xlab('zipcode')+
ggtitle("Distribution of zipcde ")
# Price vs. Grade
ggplot(house_prices4,aes(x= zipcode,y= price))+
geom_boxplot()+
xlab('zipcode')+
ylab('Price')+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("Price vs zipcode")
table(house_prices4$basement)
ggplot(house_prices4, aes(x = basement, y = price,fill=basement)) +
geom_boxplot()+
labs(x = "basement", y = "Price")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("price vs basement")
table(house_prices4$renovated)
ggplot(house_prices4, aes(x = renovated, y = price,fill=renovated)) +
geom_boxplot()+
labs(x = "renovated", y = "Price")+
scale_y_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::dollar)+
ggtitle("price vs renovated")
coordinates_data <- dplyr::select(house_prices4, price, lat, long)
head(coordinates_data)
pal = colorNumeric("YlOrRd", domain = coordinates_data$price)
int_map <- coordinates_data %>%
leaflet()%>%
addProviderTiles(providers$OpenStreetMap.Mapnik)%>%
addCircleMarkers(col = ~pal(price), opacity = 1.1, radius = 0.3) %>%
addLegend(pal = pal, values = ~price)
int_map
#sqft --> sqm
house_prices4$sqm_living <- round(house_prices4$sqft_living *qm)
house_prices4$sqm_lot <- round(house_prices4$sqft_lot *qm)
house_prices4$sqm_lot15 <- round(house_prices4$sqft_lot15 *qm)
house_prices4$sqm_living15 <- round(house_prices4$sqft_living15 *qm)
house_prices4$sqm_above <- round(house_prices4$sqft_above *qm)
house_prices4$sqm_basement <- round(house_prices4$sqft_basement *qm)
#drop sqft columns
house_prices4[,c("sqft_living","sqft_lot","sqft_above","sqft_basement","sqft_lot15","sqft_living15")] <- list(NULL)
head(house_prices4)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4<-house_prices4 %>% filter(!is.na(yearb))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade", "sqm_living", "basement","renovated", "zipcode", "yearb", "floors")]
colnames(house_prices5)
#Splitting the data on train and test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
#Making the model
model=lm(price ~., data = train)
summary(model)
#Looking the head values from Actual and Predicted
'distPred=predict(model, test)
actuals_preds <- data.frame(cbind(actuals=price, predicteds=distPred))
head(actuals_preds)'
#house_for_lm <- train %>% select(-long)
#model2=lm(log(price) ~., data = house_for_lm)
#summary(model2)
install.packages("randomForest")
library(randomForest)
install.packages('caret')
library(caret)
head(house_prices5)
model=randomForest(price~.,train)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
importance(model)
varImpPlot(model,type=2)
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
knitr::opts_chunk$set(echo = TRUE)
model=randomForest(price~.,train, mtry= 5)
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("corrplot")
install.packages("leaflet")
install.packages("caTools")
install.packages("leaflet")
install.packages("randomForest")
install.packages('caret')
install.packages('yaml')
install.packages("tidypredict")
library(randomForest)
library(caret)
install.packages("yaml")
library("leaflet")
library("corrplot")
library("ggplot2")
library("dplyr")
library("caTools")
library("yaml")
library("tidypredict")
house_prices <- read.csv("kc_house_data.csv")
#Data preparation
# bedrooms DS mit Null-Werten rauswerfen und DS ändern 33 zu 3 Schlafzimmer
house_prices2 <- house_prices
house_prices2[house_prices2$id==2402100895, "bedrooms"] <- 3
house_prices3<-house_prices2[!(house_prices2$bedrooms==0 | house_prices2$bathrooms==0),]
#Spalten As FActor
house_prices3$floors <- as.factor(house_prices3$floors)
house_prices3$waterfront <- as.factor(house_prices3$waterfront)
house_prices3$grade <- as.factor(house_prices3$grade)
house_prices3$condition <- as.factor(house_prices3$condition)
#house_prices3$zipcode <- as.factor(house_prices3$zipcode)
#Hinzufügen von zwei Spalten (boolean) (basement und renovated)
house_prices3$basement <- as.factor(ifelse(house_prices3$sqft_basement>0,1,0))
house_prices3$renovated <- as.factor(ifelse(house_prices3$yr_renovated>0,1,0))
# Ausreisser entfernen
house_prices4 = subset(house_prices3,!(house_prices3$price > 6000000))
house_prices4 = subset(house_prices4,!(house_prices4$sqft_living > 10000))
#sqft --> sqm
qm <- 0.092903
house_prices4$sqm_living <- round(house_prices4$sqft_living *qm)
house_prices4$sqm_lot <- round(house_prices4$sqft_lot *qm)
house_prices4$sqm_lot15 <- round(house_prices4$sqft_lot15 *qm)
house_prices4$sqm_living15 <- round(house_prices4$sqft_living15 *qm)
house_prices4$sqm_above <- round(house_prices4$sqft_above *qm)
house_prices4$sqm_basement <- round(house_prices4$sqft_basement *qm)
#drop sqft columns
house_prices4[,c("sqft_living","sqft_lot","sqft_above","sqft_basement","sqft_lot15","sqft_living15")] <- list(NULL)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4<-house_prices4 %>% filter(!is.na(yearb))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade", "sqm_living", "basement","renovated", "zipcode", "yearb", "floors")]
#Teilung der Daten Training und Test
set.seed(5)
sample <- sample.split(house_prices4, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
model=randomForest(price~.,train, mtry= 5)
model
#predict=predict(model,test[,-1])
#postResample(test$price,predict)
#importance(model)
#varImpPlot(model,type=2)
#parsed <- parse_model(model)
#write_yaml(parsed, "my_model.yml")
model=randomForest(price~.,train, mtry= 10)
model
#predict=predict(model,test[,-1])
#postResample(test$price,predict)
#importance(model)
#varImpPlot(model,type=2)
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
runApp()
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp()
runApp()
runApp('house_sales')
runApp()
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
shiny::runApp('house_sales')
shiny::runApp('house_sales')
knitr::opts_chunk$set(echo = TRUE)
model=randomForest(price~.,train, ntree=500,mtry= 10,importance = TRUE,)
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("corrplot")
install.packages("leaflet")
install.packages("caTools")
install.packages("randomForest")
install.packages('caret')
install.packages('yaml')
install.packages("tidypredict")
library(randomForest)
library(caret)
library("leaflet")
library("corrplot")
library("ggplot2")
library("dplyr")
library("caTools")
library("yaml")
library("tidypredict")
house_prices <- read.csv("kc_house_data.csv")
#Data preparation
# bedrooms DS mit Null-Werten rauswerfen und DS ändern 33 zu 3 Schlafzimmer
house_prices2 <- house_prices
house_prices2[house_prices2$id==2402100895, "bedrooms"] <- 3
house_prices3<-house_prices2[!(house_prices2$bedrooms==0 | house_prices2$bathrooms==0),]
#Spalten As FActor
house_prices3$floors <- as.factor(house_prices3$floors)
house_prices3$waterfront <- as.factor(house_prices3$waterfront)
house_prices3$grade <- as.factor(house_prices3$grade)
house_prices3$condition <- as.factor(house_prices3$condition)
#house_prices3$zipcode <- as.factor(house_prices3$zipcode)
#Hinzufügen von zwei Spalten (boolean) (basement und renovated)
house_prices3$basement <- as.factor(ifelse(house_prices3$sqft_basement>0,1,0))
house_prices3$renovated <- as.factor(ifelse(house_prices3$yr_renovated>0,1,0))
# Ausreisser entfernen
house_prices4 = subset(house_prices3,!(house_prices3$price > 6000000))
house_prices4 = subset(house_prices4,!(house_prices4$sqft_living > 10000))
#sqft --> sqm
qm <- 0.092903
house_prices4$sqm_living <- round(house_prices4$sqft_living *qm)
house_prices4$sqm_lot <- round(house_prices4$sqft_lot *qm)
house_prices4$sqm_lot15 <- round(house_prices4$sqft_lot15 *qm)
house_prices4$sqm_living15 <- round(house_prices4$sqft_living15 *qm)
house_prices4$sqm_above <- round(house_prices4$sqft_above *qm)
house_prices4$sqm_basement <- round(house_prices4$sqft_basement *qm)
#drop sqft columns
house_prices4[,c("sqft_living","sqft_lot","sqft_above","sqft_basement","sqft_lot15","sqft_living15")] <- list(NULL)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4<-house_prices4 %>% filter(!is.na(yearb))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade", "sqm_living", "basement","renovated", "zipcode", "yearb", "floors")]
#Teilung der Daten Training und Test
set.seed(5)
sample <- sample.split(house_prices5, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
model=randomForest(price~.,train, ntree=500,mtry= 10,importance = TRUE,)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
importance(model)
varImpPlot(model,type=2)
install.packages("ranger")
library(ranger)       # a faster implementation of randomForest
model <- ranger(
formula         = price ~ .,
data            = train,
num.trees       = 500,
mtry            = 10
)
model
predict=predict(model,test[,-1])
predict
modelOutput <- data.frame(obs = test$price, pred = prediction)
knitr::opts_chunk$set(echo = TRUE)
model=randomForest(price~.,train, ntree=500,mtry= 10,importance = TRUE,)
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("corrplot")
install.packages("leaflet")
install.packages("caTools")
install.packages("randomForest")
install.packages('caret')
install.packages('yaml')
install.packages("tidypredict")
library(randomForest)
library(caret)
library("leaflet")
library("corrplot")
library("ggplot2")
library("dplyr")
library("caTools")
library("yaml")
library("tidypredict")
house_prices <- read.csv("kc_house_data.csv")
#Data preparation
# bedrooms DS mit Null-Werten rauswerfen und DS ändern 33 zu 3 Schlafzimmer
house_prices2 <- house_prices
house_prices2[house_prices2$id==2402100895, "bedrooms"] <- 3
house_prices3<-house_prices2[!(house_prices2$bedrooms==0 | house_prices2$bathrooms==0),]
#Spalten As FActor
house_prices3$floors <- as.factor(house_prices3$floors)
house_prices3$waterfront <- as.factor(house_prices3$waterfront)
house_prices3$grade <- as.factor(house_prices3$grade)
house_prices3$condition <- as.factor(house_prices3$condition)
#house_prices3$zipcode <- as.factor(house_prices3$zipcode)
#Hinzufügen von zwei Spalten (boolean) (basement und renovated)
house_prices3$basement <- as.factor(ifelse(house_prices3$sqft_basement>0,1,0))
house_prices3$renovated <- as.factor(ifelse(house_prices3$yr_renovated>0,1,0))
# Ausreisser entfernen
house_prices4 = subset(house_prices3,!(house_prices3$price > 6000000))
house_prices4 = subset(house_prices4,!(house_prices4$sqft_living > 10000))
#sqft --> sqm
qm <- 0.092903
house_prices4$sqm_living <- round(house_prices4$sqft_living *qm)
house_prices4$sqm_lot <- round(house_prices4$sqft_lot *qm)
house_prices4$sqm_lot15 <- round(house_prices4$sqft_lot15 *qm)
house_prices4$sqm_living15 <- round(house_prices4$sqft_living15 *qm)
house_prices4$sqm_above <- round(house_prices4$sqft_above *qm)
house_prices4$sqm_basement <- round(house_prices4$sqft_basement *qm)
#drop sqft columns
house_prices4[,c("sqft_living","sqft_lot","sqft_above","sqft_basement","sqft_lot15","sqft_living15")] <- list(NULL)
house_prices4$yearb<-cut(house_prices4$yr_built,c(1900,1950,2000,2020))
house_prices4$yearb<-factor(house_prices4$yearb,levels = c("(1.9e+03,1.95e+03]","(1.95e+03,2e+03]","(2e+03,2.02e+03]"),labels = c("1900-1950","1950-2000","2000-2020"))
house_prices4<-house_prices4 %>% filter(!is.na(yearb))
#Choosing features
house_prices5=house_prices4[,c("price","bedrooms","bathrooms","waterfront","condition","grade", "sqm_living", "basement","renovated", "zipcode", "yearb", "floors")]
#Teilung der Daten Training und Test
set.seed(5)
sample <- sample.split(house_prices5, SplitRatio = .80)
train <- subset(house_prices5, sample == TRUE)
test  <- subset(house_prices5, sample == FALSE)
model=randomForest(price~.,train, ntree=500,mtry= 10,importance = TRUE,)
model
predict=predict(model,test[,-1])
postResample(test$price,predict)
importance(model)
varImpPlot(model,type=2)
install.packages("ranger")
library(ranger)       # a faster implementation of randomForest
model <- ranger(
formula         = price ~ .,
data            = train,
num.trees       = 500,
mtry            = 10
)
model
predict=predict(model,test[,-1])
predict
modelOutput <- data.frame(obs = test$price, pred = prediction)
shiny::runApp('house_sales')
runApp('house_sales')
shiny::runApp('house_sales')
shiny::runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
runApp('house_sales')
